webpackHotUpdate(0,{48:function(e,r,t){"use strict";t.r(r);var n=t(46);function o(e){return function(e){if(Array.isArray(e)){for(var r=0,t=new Array(e.length);r<e.length;r++)t[r]=e[r];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.forEach(function(r){c(e,r,t[r])})}return e}function c(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}r.default=function(e,r){switch(r.type){case n.BACKLOG_CREATE:return a({},e,{backlog:[].concat(o(e.backlog),[r.payload])});case n.BACKLOG_DELETE:return a({},e,{backlog:o(e.backlog.filter(function(e){r.payload.id,e.id}))});case n.INPROGRESS_CREATE:return a({},e,{inProgress:[].concat(o(e.inProgress),[payload])});case n.INPROGRESS_DELETE:return a({},e,{inProgress:o(e.inProgress.filter(function(e){r.payload.id,e.id}))});case n.COMPLETED_CREATE:return a({},e,{completed:[].concat(o(e.completed),[payload])});case n.COMPLETED_DELETE:return a({},e,{completed:o(e.inProgress.filter(function(e){r.payload.id,e.id}))});case n.MODAL_SHOW:return a({},e,{showModal:!0,createTye:r.payload});case n.MODAL_HIDE:return{showModal:!1,createType:null};default:return e}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcmVkdWNlcnMvaW5kZXguanMiXSwibmFtZXMiOlsiX193ZWJwYWNrX2V4cG9ydHNfXyIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsIkJBQ0tMT0dfQ1JFQVRFIiwiX29iamVjdFNwcmVhZCIsImJhY2tsb2ciLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJwYXlsb2FkIiwiQkFDS0xPR19ERUxFVEUiLCJmaWx0ZXIiLCJpdGVtIiwiaWQiLCJJTlBST0dSRVNTX0NSRUFURSIsImluUHJvZ3Jlc3MiLCJJTlBST0dSRVNTX0RFTEVURSIsIkNPTVBMRVRFRF9DUkVBVEUiLCJjb21wbGV0ZWQiLCJDT01QTEVURURfREVMRVRFIiwiTU9EQUxfU0hPVyIsInNob3dNb2RhbCIsImNyZWF0ZVR5ZSIsIk1PREFMX0hJREUiLCJjcmVhdGVUeXBlIl0sIm1hcHBpbmdzIjoidzFCQVllQSxFQUFBLGlCQUFDQyxFQUFPQyxHQUNyQixPQUFRQSxFQUFPQyxNQUNiLEtBQUtDLGlCQUNILE9BQUFDLEVBQUEsR0FDS0osRUFETCxDQUVFSyxRQUFPLEdBQUFDLE9BQUFDLEVBQU1QLEVBQU1LLFNBQVosQ0FBcUJKLEVBQU9PLFlBRXZDLEtBQUtDLGlCQUNILE9BQUFMLEVBQUEsR0FDS0osRUFETCxDQUVFSyxRQUFPRSxFQUNGUCxFQUFNSyxRQUFRSyxPQUFPLFNBQUFDLEdBQ3RCVixFQUFPTyxRQUFRSSxHQUFPRCxFQUFLQyxRQUluQyxLQUFLQyxvQkFDSCxPQUFBVCxFQUFBLEdBQ0tKLEVBREwsQ0FFRWMsV0FBVSxHQUFBUixPQUFBQyxFQUFNUCxFQUFNYyxZQUFaLENBQXdCTixZQUV0QyxLQUFLTyxvQkFDSCxPQUFBWCxFQUFBLEdBQ0tKLEVBREwsQ0FFRWMsV0FBVVAsRUFDTFAsRUFBTWMsV0FBV0osT0FBTyxTQUFBQyxHQUN6QlYsRUFBT08sUUFBUUksR0FBT0QsRUFBS0MsUUFJbkMsS0FBS0ksbUJBQ0gsT0FBQVosRUFBQSxHQUNLSixFQURMLENBRUVpQixVQUFTLEdBQUFYLE9BQUFDLEVBQU1QLEVBQU1pQixXQUFaLENBQXVCVCxZQUVwQyxLQUFLVSxtQkFDSCxPQUFBZCxFQUFBLEdBQ0tKLEVBREwsQ0FFRWlCLFVBQVNWLEVBQ0pQLEVBQU1jLFdBQVdKLE9BQU8sU0FBQUMsR0FDekJWLEVBQU9PLFFBQVFJLEdBQU9ELEVBQUtDLFFBSW5DLEtBQUtPLGFBQ0gsT0FBQWYsRUFBQSxHQUNLSixFQURMLENBRUVvQixXQUFXLEVBQ1hDLFVBQVdwQixFQUFPTyxVQUV0QixLQUFLYyxhQUNILE1BQU8sQ0FDTEYsV0FBVyxFQUNYRyxXQUFZLE1BRWhCLFFBQ0UsT0FBT3ZCIiwiZmlsZSI6IjAuNjVkZGM2NGI0MzUwMmM5MjI0ZTMuaG90LXVwZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJBQ0tMT0dfQ1JFQVRFLFxuICBCQUNLTE9HX0RFTEVURSxcbiAgSU5QUk9HUkVTU19DUkVBVEUsXG4gIElOUFJPR1JFU1NfREVMRVRFLFxuICBDT01QTEVURURfQ1JFQVRFLFxuICBDT01QTEVURURfREVMRVRFLFxuICBNT0RBTF9TSE9XLFxuICBNT0RBTF9ISURFLFxufSBmcm9tICcuL2FjdGlvblR5cGVzJztcblxuLy8gcm9vdCByZWR1Y2VyXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBCQUNLTE9HX0NSRUFURTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBiYWNrbG9nOiBbLi4uc3RhdGUuYmFja2xvZywgYWN0aW9uLnBheWxvYWRdLFxuICAgICAgfTtcbiAgICBjYXNlIEJBQ0tMT0dfREVMRVRFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGJhY2tsb2c6IFtcbiAgICAgICAgICAuLi5zdGF0ZS5iYWNrbG9nLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLmlkICE9PSBpdGVtLmlkO1xuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfTtcbiAgICBjYXNlIElOUFJPR1JFU1NfQ1JFQVRFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGluUHJvZ3Jlc3M6IFsuLi5zdGF0ZS5pblByb2dyZXNzLCBwYXlsb2FkXSxcbiAgICAgIH07XG4gICAgY2FzZSBJTlBST0dSRVNTX0RFTEVURTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpblByb2dyZXNzOiBbXG4gICAgICAgICAgLi4uc3RhdGUuaW5Qcm9ncmVzcy5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5pZCAhPT0gaXRlbS5pZDtcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgY2FzZSBDT01QTEVURURfQ1JFQVRFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGNvbXBsZXRlZDogWy4uLnN0YXRlLmNvbXBsZXRlZCwgcGF5bG9hZF0sXG4gICAgICB9O1xuICAgIGNhc2UgQ09NUExFVEVEX0RFTEVURTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjb21wbGV0ZWQ6IFtcbiAgICAgICAgICAuLi5zdGF0ZS5pblByb2dyZXNzLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLmlkICE9PSBpdGVtLmlkO1xuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfTtcbiAgICBjYXNlIE1PREFMX1NIT1c6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc2hvd01vZGFsOiB0cnVlLFxuICAgICAgICBjcmVhdGVUeWU6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgfTtcbiAgICBjYXNlIE1PREFMX0hJREU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG93TW9kYWw6IGZhbHNlLFxuICAgICAgICBjcmVhdGVUeXBlOiBudWxsLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==