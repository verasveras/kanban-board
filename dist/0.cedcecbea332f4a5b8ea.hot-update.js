webpackHotUpdate(0,{48:function(e,r,t){"use strict";t.r(r);var n=t(46);function o(e){return function(e){if(Array.isArray(e)){for(var r=0,t=new Array(e.length);r<e.length;r++)t[r]=e[r];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.forEach(function(r){c(e,r,t[r])})}return e}function c(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}r.default=function(e,r){switch(r.type){case n.BACKLOG_CREATE:return a({},e,{backlog:[].concat(o(e.backlog),[r.payload])});case n.BACKLOG_DELETE:return a({},e,{backlog:o(e.backlog.filter(function(e){r.payload.id,e.id}))});case n.INPROGRESS_CREATE:return a({},e,{inProgress:[].concat(o(e.inProgress),[payload])});case n.INPROGRESS_DELETE:return a({},e,{inProgress:o(e.inProgress.filter(function(e){r.payload.id,e.id}))});case n.COMPLETED_CREATE:return a({},e,{completed:[].concat(o(e.completed),[payload])});case n.COMPLETED_DELETE:return a({},e,{completed:o(e.inProgress.filter(function(e){r.payload.id,e.id}))});case n.MODAL_SHOW:return a({},e,{showModal:!0,createTye:r.payload});case n.MODAL_HIDE:return{showModal:!1};default:return e}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvcmVkdWNlcnMvaW5kZXguanMiXSwibmFtZXMiOlsiX193ZWJwYWNrX2V4cG9ydHNfXyIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsIkJBQ0tMT0dfQ1JFQVRFIiwiX29iamVjdFNwcmVhZCIsImJhY2tsb2ciLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJwYXlsb2FkIiwiQkFDS0xPR19ERUxFVEUiLCJmaWx0ZXIiLCJpdGVtIiwiaWQiLCJJTlBST0dSRVNTX0NSRUFURSIsImluUHJvZ3Jlc3MiLCJJTlBST0dSRVNTX0RFTEVURSIsIkNPTVBMRVRFRF9DUkVBVEUiLCJjb21wbGV0ZWQiLCJDT01QTEVURURfREVMRVRFIiwiTU9EQUxfU0hPVyIsInNob3dNb2RhbCIsImNyZWF0ZVR5ZSIsIk1PREFMX0hJREUiXSwibWFwcGluZ3MiOiJ3MUJBWWVBLEVBQUEsaUJBQUNDLEVBQU9DLEdBQ3JCLE9BQVFBLEVBQU9DLE1BQ2IsS0FBS0MsaUJBQ0gsT0FBQUMsRUFBQSxHQUNLSixFQURMLENBRUVLLFFBQU8sR0FBQUMsT0FBQUMsRUFBTVAsRUFBTUssU0FBWixDQUFxQkosRUFBT08sWUFFdkMsS0FBS0MsaUJBQ0gsT0FBQUwsRUFBQSxHQUNLSixFQURMLENBRUVLLFFBQU9FLEVBQ0ZQLEVBQU1LLFFBQVFLLE9BQU8sU0FBQUMsR0FDdEJWLEVBQU9PLFFBQVFJLEdBQU9ELEVBQUtDLFFBSW5DLEtBQUtDLG9CQUNILE9BQUFULEVBQUEsR0FDS0osRUFETCxDQUVFYyxXQUFVLEdBQUFSLE9BQUFDLEVBQU1QLEVBQU1jLFlBQVosQ0FBd0JOLFlBRXRDLEtBQUtPLG9CQUNILE9BQUFYLEVBQUEsR0FDS0osRUFETCxDQUVFYyxXQUFVUCxFQUNMUCxFQUFNYyxXQUFXSixPQUFPLFNBQUFDLEdBQ3pCVixFQUFPTyxRQUFRSSxHQUFPRCxFQUFLQyxRQUluQyxLQUFLSSxtQkFDSCxPQUFBWixFQUFBLEdBQ0tKLEVBREwsQ0FFRWlCLFVBQVMsR0FBQVgsT0FBQUMsRUFBTVAsRUFBTWlCLFdBQVosQ0FBdUJULFlBRXBDLEtBQUtVLG1CQUNILE9BQUFkLEVBQUEsR0FDS0osRUFETCxDQUVFaUIsVUFBU1YsRUFDSlAsRUFBTWMsV0FBV0osT0FBTyxTQUFBQyxHQUN6QlYsRUFBT08sUUFBUUksR0FBT0QsRUFBS0MsUUFJbkMsS0FBS08sYUFDSCxPQUFBZixFQUFBLEdBQ0tKLEVBREwsQ0FFRW9CLFdBQVcsRUFDWEMsVUFBV3BCLEVBQU9PLFVBRXRCLEtBQUtjLGFBQ0gsTUFBTyxDQUNMRixXQUFXLEdBRWYsUUFDRSxPQUFPcEIiLCJmaWxlIjoiMC5jZWRjZWNiZWEzMzJmNGE1YjhlYS5ob3QtdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQkFDS0xPR19DUkVBVEUsXG4gIEJBQ0tMT0dfREVMRVRFLFxuICBJTlBST0dSRVNTX0NSRUFURSxcbiAgSU5QUk9HUkVTU19ERUxFVEUsXG4gIENPTVBMRVRFRF9DUkVBVEUsXG4gIENPTVBMRVRFRF9ERUxFVEUsXG4gIE1PREFMX1NIT1csXG4gIE1PREFMX0hJREUsXG59IGZyb20gJy4vYWN0aW9uVHlwZXMnO1xuXG4vLyByb290IHJlZHVjZXJcbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEJBQ0tMT0dfQ1JFQVRFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGJhY2tsb2c6IFsuLi5zdGF0ZS5iYWNrbG9nLCBhY3Rpb24ucGF5bG9hZF0sXG4gICAgICB9O1xuICAgIGNhc2UgQkFDS0xPR19ERUxFVEU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgYmFja2xvZzogW1xuICAgICAgICAgIC4uLnN0YXRlLmJhY2tsb2cuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQuaWQgIT09IGl0ZW0uaWQ7XG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICB9O1xuICAgIGNhc2UgSU5QUk9HUkVTU19DUkVBVEU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgaW5Qcm9ncmVzczogWy4uLnN0YXRlLmluUHJvZ3Jlc3MsIHBheWxvYWRdLFxuICAgICAgfTtcbiAgICBjYXNlIElOUFJPR1JFU1NfREVMRVRFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGluUHJvZ3Jlc3M6IFtcbiAgICAgICAgICAuLi5zdGF0ZS5pblByb2dyZXNzLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLmlkICE9PSBpdGVtLmlkO1xuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfTtcbiAgICBjYXNlIENPTVBMRVRFRF9DUkVBVEU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgY29tcGxldGVkOiBbLi4uc3RhdGUuY29tcGxldGVkLCBwYXlsb2FkXSxcbiAgICAgIH07XG4gICAgY2FzZSBDT01QTEVURURfREVMRVRFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGNvbXBsZXRlZDogW1xuICAgICAgICAgIC4uLnN0YXRlLmluUHJvZ3Jlc3MuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQuaWQgIT09IGl0ZW0uaWQ7XG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICB9O1xuICAgIGNhc2UgTU9EQUxfU0hPVzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzaG93TW9kYWw6IHRydWUsXG4gICAgICAgIGNyZWF0ZVR5ZTogYWN0aW9uLnBheWxvYWQsXG4gICAgICB9O1xuICAgIGNhc2UgTU9EQUxfSElERTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3dNb2RhbDogZmFsc2UsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9